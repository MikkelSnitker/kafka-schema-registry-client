/*
 * Confluent Schema Registry
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SchemaString : Schema definition
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SchemaString {
    /// Schema type
    #[serde(rename = "schemaType", skip_serializing_if = "Option::is_none")]
    pub schema_type: Option<String>,
    /// Schema string identified by the ID
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// References to other schemas
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<models::SchemaReference>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<models::Metadata>>,
    #[serde(rename = "ruleSet", skip_serializing_if = "Option::is_none")]
    pub rule_set: Option<Box<models::RuleSet>>,
    /// Maximum ID
    #[serde(rename = "maxId", skip_serializing_if = "Option::is_none")]
    pub max_id: Option<i32>,
}

impl SchemaString {
    /// Schema definition
    pub fn new() -> SchemaString {
        SchemaString {
            schema_type: None,
            schema: None,
            references: None,
            metadata: None,
            rule_set: None,
            max_id: None,
        }
    }
}

