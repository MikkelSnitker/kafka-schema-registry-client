/*
 * Confluent Schema Registry
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ConfigUpdateRequest : Config update request
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigUpdateRequest {
    #[serde(rename = "alias", skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(rename = "normalize", skip_serializing_if = "Option::is_none")]
    pub normalize: Option<bool>,
    /// Compatibility Level
    #[serde(rename = "compatibility", skip_serializing_if = "Option::is_none")]
    pub compatibility: Option<Compatibility>,
    #[serde(rename = "compatibilityGroup", skip_serializing_if = "Option::is_none")]
    pub compatibility_group: Option<String>,
    #[serde(rename = "defaultMetadata", skip_serializing_if = "Option::is_none")]
    pub default_metadata: Option<Box<models::Metadata>>,
    #[serde(rename = "overrideMetadata", skip_serializing_if = "Option::is_none")]
    pub override_metadata: Option<Box<models::Metadata>>,
    #[serde(rename = "defaultRuleSet", skip_serializing_if = "Option::is_none")]
    pub default_rule_set: Option<Box<models::RuleSet>>,
    #[serde(rename = "overrideRuleSet", skip_serializing_if = "Option::is_none")]
    pub override_rule_set: Option<Box<models::RuleSet>>,
}

impl ConfigUpdateRequest {
    /// Config update request
    pub fn new() -> ConfigUpdateRequest {
        ConfigUpdateRequest {
            alias: None,
            normalize: None,
            compatibility: None,
            compatibility_group: None,
            default_metadata: None,
            override_metadata: None,
            default_rule_set: None,
            override_rule_set: None,
        }
    }
}
/// Compatibility Level
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Compatibility {
    #[serde(rename = "BACKWARD")]
    Backward,
    #[serde(rename = "BACKWARD_TRANSITIVE")]
    BackwardTransitive,
    #[serde(rename = "FORWARD")]
    Forward,
    #[serde(rename = "FORWARD_TRANSITIVE")]
    ForwardTransitive,
    #[serde(rename = "FULL")]
    Full,
    #[serde(rename = "FULL_TRANSITIVE")]
    FullTransitive,
    #[serde(rename = "NONE")]
    None,
}

impl Default for Compatibility {
    fn default() -> Compatibility {
        Self::Backward
    }
}

